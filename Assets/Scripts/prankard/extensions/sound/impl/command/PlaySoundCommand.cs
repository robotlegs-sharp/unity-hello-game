//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using Robotlegs.Bender.Extensions.CommandCenter.API;
using prankard.extensions.sound.api.events;
using prankard.extensions.sound.api.model;
using prankard.extensions.sound.impl.constant;


namespace prankard.extensions.sound.impl.command
{
	public class PlaySoundCommand : ICommand
	{
		[Inject(SoundKeys.GAMEOBJECT_EFFECTS)]
		public GameObject soundEffectsGameObject {get;set;}

		[Inject(SoundKeys.GAMEOBJECT_MUSIC)]
		public GameObject soundMusicGameObject {get;set;}

		[Inject]
		public ISoundModel soundModel {get;set;}
		
		[Inject]
		public SoundEvent evt {get;set;}

		public void Execute ()
		{
			switch ((SoundEvent.Type)evt.type)
			{
			case SoundEvent.Type.STOP_MUSIC_TRACK:
				AudioSource audioSource = GetOneAudioSource(soundMusicGameObject);
				if (audioSource)
				{
					audioSource.Stop();
					GameObject.Destroy(audioSource);
				}
				break;
			case SoundEvent.Type.PLAY_MUSIC_TRACK:
				PlaySound(soundModel.GetMusicTrack(evt.Name).audio, GetOneAudioSource(soundMusicGameObject), soundModel.MusicVolume, true);
				break;
			case SoundEvent.Type.PLAY_SOUND_EFFECT:
				if (soundModel.SoundVolume <= 0)
					return;
				PlaySound(soundModel.GetSoundEffect(evt.Name).audio, GetUnusedAudioSource(soundEffectsGameObject), soundModel.SoundVolume, false);
				break;
			}
		}

		private void PlaySound(AudioClip audioClip, AudioSource audioSource, float volume, bool loop)
		{
			if (audioSource.isPlaying && audioSource.clip == audioClip)
				return;
//			audioSource.enabled = true;
			if (audioSource.enabled == false)
				Debug.Break();

			if (audioClip == null)
				throw new Exception ("Failed to play");

			audioSource.clip = audioClip;
			audioSource.volume = volume;
			audioSource.pitch = evt.Pitch;
			audioSource.Play();
			audioSource.loop = loop;
		}

		private AudioSource GetOneAudioSource(GameObject target)
		{
			AudioSource returnSource = target.GetComponent<AudioSource>();
			
			if (returnSource == null)
				returnSource = target.AddComponent<AudioSource>();
			
			return returnSource;
		}

		private AudioSource GetUnusedAudioSource(GameObject target)
		{
			AudioSource[] sources = target.GetComponents<AudioSource>();
			AudioSource returnSource = null;
			for (int i = 0; i < sources.Length; i++)
			{
				if (!sources[i].isPlaying && sources[i].enabled)
				{
					if (returnSource == null)
						returnSource = sources[i];
					else
						GameObject.Destroy(sources[i]);
				}
			}

			if (returnSource == null)
				returnSource = target.AddComponent<AudioSource>();

			return returnSource;
		}
	}
}

